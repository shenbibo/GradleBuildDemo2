apply plugin: 'com.android.application'
//apply plugin: 'com.android.library'
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        debug {
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['debugKeyPassword']
            storeFile file(keystoreProperties['debugStoreFile'])
            storePassword keystoreProperties['debugStorePassword']
        }

        release{
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storeFile file(keystoreProperties['releaseStoreFile'])
            storePassword keystoreProperties['releaseStorePassword']
        }
    }

    compileSdkVersion rootProject.ext.compileSdk
    buildToolsVersion rootProject.ext.buildTools
    defaultConfig {
        applicationId "com.inpor.fmcdevicedemon"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resConfigs "zh-rCN", "xxhdpi"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        custom{
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false

            //指定签名文件为release签名
            signingConfig signingConfigs.release

            minifyEnabled true
            shrinkResources true

            resValue "string", "custom_name", "测试用户"
        }

    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //过滤只打包英文和简体中文的资源
    splits{
        //设置根据language拆分测试未通过，应该是字符串的表现形式不对
//        language{
//            enable true
//            include "values-zh-rCN"
//            include "zh-rCN"
//        }

//        density{
//            enable true
//            reset()  // Clears the default list from all densities to no densities.
//            include "mdpi", "xxhdpi" // Specifies the two densities we want to generate APKs for.
//        }
    }

    sourceSets{
        main{
            jniLibs.srcDirs=['libs']
        }

        custom{
            //指定一个新的jnilibs为根目录下的jnilibs
            jniLibs.srcDirs=[rootProject.projectDir.absolutePath + '/jnilibs']

            //指定一个新的assets为根目录下的skyTestAssets目录
            assets.srcDirs = [rootProject.projectDir.absolutePath + '/assets/skyTestAssets']

            println(providedConfigurationName)
            println(name)
            println(packageConfigurationName)
            println(compileConfigurationName)
        }

        //此处增加一个空的sourceSet，是为了解决在dependencies中使用skyCommonClientCustomCompile 指定依赖项时提示找不到方法的错误
        skyCommonClientCustom{

        }

    }


    //使用dimensions将一些公共的修改独立出来，可以重复使用，减小代码的重复
    flavorDimensions 'type', 'common'

    //多渠道打包
    productFlavors{
        sky{
            dimension 'type'
            //直接在原有包名后面添加
            applicationIdSuffix ".sky"

            //指定不同的版本
            versionName '1.2.0'
            versionCode 120
        }

        gavin{
            dimension 'type'
            //重新命名包名
            applicationId "com.gavin.gradlebuilddemo"

            //指定不同的最小编译版本
            minSdkVersion 17
            targetSdkVersion 21
        }

        smith{
            dimension 'type'
            applicationId "com.smith.gradlebuilddemo"

            //指定不同的resConfig
            resConfigs "en", "hdpi"

            //添加resValue
            resValue 'string', 'smith', 'this is smith'
        }

        commonClient{
            dimension 'common'

            //添加resValue
            resValue 'string', 'common_client', 'this is common_client'
        }

        commonPrivate{
            dimension 'common'

            //指定一个私有的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-private.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    testCompile 'junit:junit:4.12'

    // flavor为sky的指定jar库，且不使用libs下的`okhttp-3.2.0.jar`库，使用skyCommon目录下的okhttp-3.3.1.jar
    skyCompile fileTree(include: ['*.jar'], dir: 'libs', excludes: ['okhttp-3.2.0.jar'])
    skyCompile fileTree(include: ['*.jar'], dir: 'jar/sky')

    // 构建变体依赖项指定，在构建该版本apk时，编译时增加使用该目录下的jar包
    skyCommonClientCustomCompile fileTree(include: ['*.jar'], dir: 'jar/skyCommonClientCustom')
}
